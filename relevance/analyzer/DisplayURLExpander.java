package analyzer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import query.QueryRecord;
import util.Global;
import util.Logger;
import util.Logger.MsgType;


/*
 * This class checks if the part of query is part of one of the relevant documents
 * display URL.  If it is, it checks the titles of such relevant pages for relevant terms
 * Only 5 relevant terms are considered.
 * Test Case - Columbia to fetch results for columbia university
 */
public class DisplayURLExpander extends Expander {

	@Override
	public void expand(String[] query, List<String> revisedQuery) {
		
		//set the originalQuery and sanitizedOriginalQuery
		setQueries(query);
		
		//get a local copy of Global.relevantTerms and logger instance
		List<String> relevantTerms = Global.getRelevantTerms();
		Logger myLogger = Logger.getInstance();
		
		boolean isFound = false;
		String titleText = "";
		
		//candidates contains list of relevantTerms that appear in the title
		//of the webpage (webpage associated with this algorithm)
		List<String> candidates = new ArrayList<String>();
		
		//contains aggregated titleList of all webpages that are of interest
		List<String> titleList = new ArrayList<String>();
			
		Iterator<QueryRecord> iter = Global.getPositives().iterator();
		
		//Search for webpages whose domain is contained in the query.
		while(iter.hasNext())
		{	
			QueryRecord result = iter.next();
			String displayUrl = result.displayUrl();	
		
			//find first index of . and second index of ., extract subString 
			//them.  It should work for most webpages.
			displayUrl = displayUrl.substring(displayUrl.indexOf('.') + 1);
	
			//search for the next period
			displayUrl = displayUrl.substring(0, displayUrl.indexOf('.'));
			
			if(Global.DEBUG)
				myLogger.write("Display URL: " + displayUrl, MsgType.DEBUG);
			
			displayUrl = displayUrl.toLowerCase().trim();
			displayUrl = displayUrl.trim().toLowerCase();
			
			if(Global.DEBUG)
				myLogger.write("Display URL: " + displayUrl, MsgType.DEBUG);
				
			//check if display url contains any of the query words
			for (String s : sanitizedOriginalQuery)
				if ( displayUrl.contains(s) )
				{
					isFound = true;
					titleText = titleText + result.getTitle();
				}
		}
			
		if(Global.DEBUG)
			myLogger.write("Title Text by Display URL Expander: " 
													+ titleText, MsgType.DEBUG);
					
		if (isFound)
		{
			//check which top two terms appear in the title and in which order
			titleText = titleText.trim().toLowerCase();
			String[] titleArray = titleText.split("[\\s+]");
			titleList = Arrays.asList(titleArray);
			
			Global.sanitizeList(titleList);
			
			//check top 5 elements
				
			Iterator<String> itr = relevantTerms.iterator();
			int count = 0;
			
			//check top 5 relevant terms, and if they are part of the titleList,
			//add them to candidates
			while (itr.hasNext() && count < 5)
			{
				String s = itr.next();
				if(titleList.contains(s))
					candidates.add(s);
			}
		}
			
		//add the top two elements to the candidates list
		if(candidates.size() > 0)
		{
			//order of those terms in respect to each other
			if (candidates.size() > 1)
				analyzeOrder(candidates, titleList);
			
			revisedQuery.addAll(originalQuery);
			//add first two element
			revisedQuery.add(candidates.get(0));
			revisedQuery.add(candidates.get(1));
			
			myLogger.write("Revised Query generated by Display URL Expander:" +
								revisedQuery.toString(), MsgType.DEBUG);
		}
			
	}
	
	private void analyzeOrder(List<String> candidates, List<String> titleList) {
		
		if ( titleList.indexOf(candidates.get(0)) > titleList.indexOf(candidates.get(1)) )
		{
			String temp = candidates.get(0);
			candidates.set(0, candidates.get(1));
			candidates.set(1, temp);
		}
	}
}
